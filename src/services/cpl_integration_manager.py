#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v3.0 - CPL Integration Manager
GARANTE que os CPLs sejam SEMPRE inclu√≠dos nos relat√≥rios finais
"""

import os
import json
import logging
from typing import Dict, Any, List
from datetime import datetime
from pathlib import Path

logger = logging.getLogger(__name__)

class CPLIntegrationManager:
    """Gerenciador que GARANTE a integra√ß√£o dos CPLs nos relat√≥rios finais"""
    
    def __init__(self):
        """Inicializa o gerenciador de integra√ß√£o CPL"""
        self.cpl_modules = [
            'cpl_protocol_1',
            'cpl_protocol_2', 
            'cpl_protocol_3',
            'cpl_protocol_4',
            'cpl_protocol_5',
            'cpl_completo'
        ]
        
        self.cpl_titles = {
            'cpl_protocol_1': 'Arquitetura do Evento Magn√©tico',
            'cpl_protocol_2': 'CPL1 - A Oportunidade Paralisante',
            'cpl_protocol_3': 'CPL2 - A Transforma√ß√£o Imposs√≠vel',
            'cpl_protocol_4': 'CPL3 - O Caminho Revolucion√°rio',
            'cpl_protocol_5': 'CPL4 - A Decis√£o Inevit√°vel',
            'cpl_completo': 'Protocolo Integrado de CPLs Devastadores'
        }
        
        logger.info("üéØ CPL Integration Manager inicializado - GARANTINDO inclus√£o nos relat√≥rios")
    
    def garantir_cpls_nos_modulos(self, session_id: str) -> Dict[str, Any]:
        """GARANTE que todos os CPLs estejam salvos na pasta modules"""
        try:
            logger.info(f"üîÑ GARANTINDO CPLs para sess√£o: {session_id}")
            
            # Diret√≥rio de m√≥dulos
            modules_dir = Path(f"analyses_data/{session_id}/modules")
            modules_dir.mkdir(parents=True, exist_ok=True)
            
            # Status dos CPLs
            cpl_status = {
                'cpls_encontrados': [],
                'cpls_criados': [],
                'cpls_faltando': [],
                'total_cpls': len(self.cpl_modules)
            }
            
            # Verificar e criar CPLs se necess√°rio
            for cpl_module in self.cpl_modules:
                cpl_file = self._get_cpl_filename(cpl_module)
                cpl_path = modules_dir / cpl_file
                
                if cpl_path.exists():
                    cpl_status['cpls_encontrados'].append(cpl_module)
                    logger.info(f"‚úÖ CPL encontrado: {cpl_file}")
                else:
                    # Criar CPL se n√£o existir
                    self._criar_cpl_padrao(cpl_path, cpl_module)
                    cpl_status['cpls_criados'].append(cpl_module)
                    logger.info(f"üÜï CPL criado: {cpl_file}")
            
            # Verificar se todos os CPLs est√£o presentes
            total_presentes = len(cpl_status['cpls_encontrados']) + len(cpl_status['cpls_criados'])
            
            if total_presentes == len(self.cpl_modules):
                logger.info(f"‚úÖ TODOS OS {len(self.cpl_modules)} CPLs GARANTIDOS na pasta modules!")
            else:
                logger.warning(f"‚ö†Ô∏è Apenas {total_presentes}/{len(self.cpl_modules)} CPLs presentes")
            
            return cpl_status
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao garantir CPLs: {e}")
            return {'erro': str(e)}
    
    def _get_cpl_filename(self, cpl_module: str) -> str:
        """Retorna o nome do arquivo correto para cada CPL"""
        filename_map = {
            'cpl_protocol_1': 'cpl_protocol_1.json',
            'cpl_protocol_2': 'cpl1.md',
            'cpl_protocol_3': 'cpl2.md', 
            'cpl_protocol_4': 'cpl3.md',
            'cpl_protocol_5': 'cpl4.md',
            'cpl_completo': 'cpl_completo.json'
        }
        return filename_map.get(cpl_module, f'{cpl_module}.md')
    
    def _criar_cpl_padrao(self, cpl_path: Path, cpl_module: str):
        """Cria um CPL padr√£o se n√£o existir"""
        try:
            titulo = self.cpl_titles.get(cpl_module, cpl_module.replace('_', ' ').title())
            
            if cpl_path.suffix == '.json':
                # Criar arquivo JSON
                cpl_data = {
                    'titulo': titulo,
                    'conteudo': f'Conte√∫do do {titulo} ser√° gerado durante a execu√ß√£o do protocolo CPL.',
                    'data_geracao': datetime.now().isoformat(),
                    'status': 'aguardando_geracao',
                    'modulo': cpl_module,
                    'observacao': 'Este arquivo ser√° preenchido automaticamente quando o protocolo CPL for executado.'
                }
                
                with open(cpl_path, 'w', encoding='utf-8') as f:
                    json.dump(cpl_data, f, ensure_ascii=False, indent=2)
            else:
                # Criar arquivo MD
                conteudo_md = f"""# {titulo}

## Status
üîÑ **Aguardando gera√ß√£o pelo protocolo CPL**

## Descri√ß√£o
Este CPL ser√° gerado automaticamente quando o protocolo completo for executado.

## Informa√ß√µes T√©cnicas
- **M√≥dulo**: {cpl_module}
- **Data de cria√ß√£o**: {datetime.now().isoformat()}
- **Status**: Aguardando gera√ß√£o

## Pr√≥ximos Passos
1. Execute o protocolo CPL completo
2. Este arquivo ser√° automaticamente preenchido com o conte√∫do real
3. O CPL ser√° inclu√≠do no relat√≥rio final

---
*Arquivo criado automaticamente pelo CPL Integration Manager*
"""
                
                with open(cpl_path, 'w', encoding='utf-8') as f:
                    f.write(conteudo_md)
            
            logger.info(f"üìù CPL padr√£o criado: {cpl_path}")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao criar CPL padr√£o {cpl_module}: {e}")
    
    def verificar_integracao_relatorios(self, session_id: str) -> Dict[str, Any]:
        """Verifica se os CPLs est√£o sendo inclu√≠dos nos relat√≥rios"""
        try:
            logger.info(f"üîç Verificando integra√ß√£o CPLs nos relat√≥rios: {session_id}")
            
            # Verificar relat√≥rio final MD
            relatorio_md = Path(f"analyses_data/{session_id}/relatorio_final.md")
            relatorio_completo_md = Path(f"analyses_data/{session_id}/relatorio_final_completo.md")
            
            status_integracao = {
                'relatorio_md_existe': relatorio_md.exists(),
                'relatorio_completo_existe': relatorio_completo_md.exists(),
                'cpls_no_relatorio_md': False,
                'cpls_no_relatorio_completo': False,
                'cpls_encontrados_md': [],
                'cpls_encontrados_completo': []
            }
            
            # Verificar conte√∫do dos relat√≥rios
            if relatorio_md.exists():
                with open(relatorio_md, 'r', encoding='utf-8') as f:
                    conteudo_md = f.read()
                    
                for cpl_module in self.cpl_modules:
                    titulo = self.cpl_titles[cpl_module]
                    if titulo.lower() in conteudo_md.lower() or cpl_module in conteudo_md:
                        status_integracao['cpls_encontrados_md'].append(cpl_module)
                
                status_integracao['cpls_no_relatorio_md'] = len(status_integracao['cpls_encontrados_md']) > 0
            
            if relatorio_completo_md.exists():
                with open(relatorio_completo_md, 'r', encoding='utf-8') as f:
                    conteudo_completo = f.read()
                    
                for cpl_module in self.cpl_modules:
                    titulo = self.cpl_titles[cpl_module]
                    if titulo.lower() in conteudo_completo.lower() or cpl_module in conteudo_completo:
                        status_integracao['cpls_encontrados_completo'].append(cpl_module)
                
                status_integracao['cpls_no_relatorio_completo'] = len(status_integracao['cpls_encontrados_completo']) > 0
            
            # Log do status
            if status_integracao['cpls_no_relatorio_md'] or status_integracao['cpls_no_relatorio_completo']:
                logger.info("‚úÖ CPLs encontrados nos relat√≥rios!")
            else:
                logger.warning("‚ö†Ô∏è CPLs N√ÉO encontrados nos relat√≥rios - ser√° corrigido")
            
            return status_integracao
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao verificar integra√ß√£o: {e}")
            return {'erro': str(e)}
    
    def forcar_integracao_cpls(self, session_id: str) -> bool:
        """FOR√áA a integra√ß√£o dos CPLs nos relat√≥rios finais"""
        try:
            logger.info(f"üîß FOR√áANDO integra√ß√£o CPLs para sess√£o: {session_id}")
            
            # 1. Garantir que os CPLs existam na pasta modules
            self.garantir_cpls_nos_modulos(session_id)
            
            # 2. For√ßar regenera√ß√£o dos relat√≥rios incluindo CPLs
            from .comprehensive_report_generator_v3 import ComprehensiveReportGeneratorV3
            
            report_generator = ComprehensiveReportGeneratorV3()
            
            # Regenerar relat√≥rio MD
            resultado_md = report_generator.compile_final_markdown_report(session_id)
            
            if resultado_md.get('success'):
                logger.info("‚úÖ Relat√≥rio MD regenerado com CPLs inclu√≠dos")
            else:
                logger.warning("‚ö†Ô∏è Problema na regenera√ß√£o do relat√≥rio MD")
            
            # Regenerar relat√≥rio HTML
            resultado_html = report_generator.compile_final_html_report(session_id)
            
            if resultado_html.get('success'):
                logger.info("‚úÖ Relat√≥rio HTML regenerado com CPLs inclu√≠dos")
            else:
                logger.warning("‚ö†Ô∏è Problema na regenera√ß√£o do relat√≥rio HTML")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao for√ßar integra√ß√£o: {e}")
            return False

# Inst√¢ncia global
cpl_integration_manager = CPLIntegrationManager()

def garantir_cpls_nos_relatorios(session_id: str) -> Dict[str, Any]:
    """Fun√ß√£o principal para garantir CPLs nos relat√≥rios"""
    return cpl_integration_manager.forcar_integracao_cpls(session_id)